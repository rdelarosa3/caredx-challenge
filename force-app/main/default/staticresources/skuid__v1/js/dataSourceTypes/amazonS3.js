!function(a){var r={};function o(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return a[e].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.m=a,o.c=r,o.d=function(e,t,a){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(o.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(a,r,function(e){return t[e]}.bind(null,r));return a},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=352)}({352:function(e,t,a){"use strict";var y,c,p,f,m,h,b,r,g,o,n,i,l,u,d,s,k,v,S,j,w;y=skuid,c=y.$,p=c.Deferred,f=y.utils,m=f.getInvokable,h=f.mergeAsTextInContext,b=f.mergeAsDataInContext,r=y.dataSource,g=r.utils,o=y.constants,n=o.DISPLAY_TYPES,i=o.HTTP_VERBS,l="AmazonS3",u=n.BOOLEAN,d=n.DATETIME,s=n.NUMBER,k=i.POST,v="Bucket",S="FolderPath",j="__default_searchbox",w=function(e,t,a){var r={method:e};return a&&(r.body=a),y.ajax.direct({url:"/core/data/aws-s3/sign-request",type:"POST",body:r,contentType:"application/json",headers:{"x-skuid-data-source-name":t.name}}).then(function(e){return e.body.signedRequest})},r.getDataSourceType(l)||new r.core.RESTDataSourceTypeBase({name:l,coerceRequest:function(e){var t=e.type,a=e.model,r=this.getEntityMetadataCacheKey(a),o=g.getModelMergeConditions(a,e,{urlEncode:!1}),n="delete"===t,i="query"===t,l="search"===t,u=e.request;if(a.useProxy=!1,i){if("Bucket"===r)u.data={method:"listBuckets"};else if("Object"===r)if(u.data={method:"listObjects",body:{Bucket:o[v]}},o[S]){var d=o[S];"/"!==d[d.length-1]&&(d+="/"),o[j]?u.data.body.Prefix=d+o[j]:u.data.body.Prefix=d}else o[j]&&(u.data.body.Prefix=o[j])}else n?"Object"===r&&(u.data={method:"deleteObject",body:{Bucket:o[v],Key:e.row.Key}}):l&&"Object"===r&&(u.data={method:"listObjects",body:{Bucket:o.bucket,Prefix:o.search}});u.headers={"x-skuid-data-source-name":a.getDataSource().name},u.url="/core/data/aws"},parseSuccessfulLoadResponse:function(e,t,a,r){var o=f.parseAsJSONIfString(e.body),n=t.pathToContent,i=this.getEntityMetadataCacheKey(r),l=g.getModelMergeConditions(r,{model:r},{urlEncode:!1}),u=n?f.getObjectProperty(o,n):o,d=l&&l[v];return c.isArray(u)&&c.each(u,function(e,t){if("Object"===i){l[S]&&(t.Name=t.Key.substring(l[S].length),"/"!==t.Name&&t.Name||(t.Name="(Current Parent Folder)"));var a=(t.Name||t.Key).split("/");t.Name=a[a.length-1]||a[a.length-2],"/"===t.Key[t.Key.length-1]&&(t.isFolder=!0),t.ownerID=f.grab(t,"Owner","ID"),t.ownerName=f.grab(t,"Owner","DisplayName"),t.Bucket=d}}),u},getEntityList:g.getEntityListStatic,getUploadMethods:function(){return{"S3 Direct Upload":{label:"S3 Upload Direct",canRunPostUploadSnippet:!0,upload:function(a,e,t,r,o){var n,i,l,u=f.renameFileWhileKeepingExtension(a.name,t.fileNameOverride?f.mergeAsTextInContext(t.fileNameOverride,t):""),d=m(e.options.xmlDef,"attr"),c=d("model"),s=c&&y.$M(c),p=s?s.getDataSource():y.dataSource.get(d("datasource"));r({fileName:u});var b={method:"putObject",body:{Key:u,ContentType:a.type,Expires:60,ACL:d("acl")||"public-read"}};s?((i=g.getModelMergeConditions(s,t,{urlEncode:!1}))[v]?n=i[v]:o({message:'Error: Uploads to S3 require a Model with a "Bucket" Condition'}),i[S]&&(l=i[S])):(n=d("bucket"),l=d("folderpath")),n?b.body.Bucket=h(n,s?{model:s}:t):o({message:"Error: Uploads to S3 require a valid Bucket."}),l&&("/"!==l[l.length-1]&&(l+="/"),b.body.Key=h(l,s?{model:s}:t)+b.body.Key),w(b.method,p,b.body).then(function(e){var t=new XMLHttpRequest;t.open("PUT",e,!0),t.onreadystatechange=function(e){e&&(4===e.target.readyState&&200===e.target.status?o():(400<=e.target.status||0===e.target.status)&&o({message:"Error uploading to S3. Make sure bucket name is correct and CORs is configured for the bucket."}))},t.send(a)})},needsModelInContext:!0,hasDescription:!1,builderProps:function(e,t){var a=[];return t.attr("model")||a.push({id:"bucket",type:"template",label:"S3 Bucket Name",helptext:"The name of the AWS Bucket into which to upload files.",location:"attribute",displayAs:"input"},{id:"folderpath",type:"template",label:"S3 Folder Path",helptext:'The Folder Path, e.g. "/some/folder" within the selected Bucket in which uploaded files will be placed.',location:"attribute",displayAs:"input"}),a.push({id:"acl",type:"picklist",picklistEntries:[{label:"public-read",value:"public-read"},{label:"private",value:"private"},{label:"public-read-write",value:"public-read-write"},{label:"aws-exec-read",value:"aws-exec-read"},{label:"authenticated-read",value:"authenticated-read"},{label:"bucket-owner-read",value:"bucket-owner-read"},{label:"bucket-owner-full-control",value:"bucket-owner-full-control"}],label:"ACL of File"}),a}}}},queryEntityMetadata:g.queryEntityMetadataStatic,searchProperties:function(e){return{conditions:[{name:"bucket",sourceType:"param",sourceParam:"bucket",value:e.attr("bucket"),operator:"=",encloseValueInQuotes:!1,inactive:!1}],properties:[{id:"bucket",label:"Bucket Name",type:"text"}]}},getActions:g.getActionsStatic,createActions:function(e){return{"s3-request-download":{builderProps:[{label:"Key of Object",id:"key",type:"template",value:"{{Key}}",location:"attribute"},{label:"Bucket that holds Object",id:"bucket",type:"template",value:"{{Bucket}}",location:"attribute"}],runtimeExecution:function(e,t,a,r){a=a||{};var o=p(),n=h(e.attr("key"),a),i=h(e.attr("bucket"),a);return i&&n?(w("getObject",r,{Bucket:i,Key:n}).then(function(e){g.downloadWithLink(n,e),o.resolve()}),o.promise()):o.reject("Must have a key or bucket specified")},label:"Download Target Object"},"s3-download-row":{builderProps:[{label:"Model of Objects",id:"model",type:"model",entryFilter:f.filterByDataSourceAndEntity(e.name,"Object")}],runtimeExecution:function(e,t,a){a=a||{};var r,o,n=p(),i=g.extrapolateRowFromContext(a),l=a.model,u=b(e.attr("model"),a),d=l;if(!u)return n.reject("s3-request-download requires a model");if(l.id!==u||!i){if(d=(r=y.model.getModel(u))||l,o=r&&r.getRows(),!r||o.length)return n.reject();i=o[0]}d||n.reject();var c=g.getModelMergeConditions(d,a,{urlEncode:!1});c[v]||n.reject("Downloading a file requires a bucket"),i.Key||n.reject("Downloading a file requires a key");var s={Bucket:c[v],Key:i.Key};return w("getObject",d.dataSource,s).then(function(e){g.downloadWithLink(i.Key,e),n.resolve()}),n},label:"Download Row Object"}}},extendedProperties:{composer:{unomittableFields:!0,hasEntityOptions:!0},hasDefaultSearch:!0,canServerSearch:!0,hasGlobalSearchEntities:!0,"x-metadata":{__skuid_fieldDefaults:{"*":{displaytype:"TEXT",writeable:!1,filterable:!1}},Bucket:{label:"Bucket",labelPlural:"Buckets",idFields:["Name"],fields:[{id:"CreationDate",displaytype:d,inlineHelpText:"When the Bucket was created"},{id:"Name",inlineHelpText:"The name of the bucket"}],methods:{query:{pathToContent:"Buckets",url:"",verb:k,contentType:"application/json"}}},Object:{label:"Object",labelPlural:"Objects",idFields:["Key"],fields:[{id:"ETag"},{id:"Key",inlineHelpText:"The key/name of the object",omittable:!1},{id:"Bucket",inlineHelpText:"The bucket which contains the object",omittable:!1},{id:"Name",label:"Object Name"},{id:"LastModified",displaytype:d},{id:"ownerName"},{id:"isFolder",displaytype:u},{id:"ownerID"},{id:"Size",displaytype:s},{id:"StorageClass"}],methods:{query:{pathToContent:"Contents",url:"",verb:k,contentType:"application/json"},delete:{url:"",verb:k,successIf:"requestsucceeds"},search:{pathToContent:"Contents",url:"",verb:k,contentType:"application/json"}},defaultConditions:[{sourcetype:"param",sourceparam:v,name:v,label:v,state:"filterablerequired",value:""},{sourcetype:"param",sourceparam:S,name:S,label:S,state:"filterablerequired",value:""}]}}}})}});