skuid.runtime.registerApi("v2","dataSourceTypes/amazonS3",function(e){var t=function(e){var t={};function a(r){if(t[r]){return t[r].exports}var o=t[r]={i:r,l:false,exports:{}};e[r].call(o.exports,o,o.exports,a);o.l=true;return o.exports}a.m=e;a.c=t;a.d=function(e,t,r){if(!a.o(e,t)){Object.defineProperty(e,t,{enumerable:true,get:r})}};a.r=function(e){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(e,"__esModule",{value:true})};a.t=function(e,t){if(t&1)e=a(e);if(t&8)return e;if(t&4&&typeof e==="object"&&e&&e.__esModule)return e;var r=Object.create(null);a.r(r);Object.defineProperty(r,"default",{enumerable:true,value:e});if(t&2&&typeof e!="string")for(var o in e)a.d(r,o,function(t){return e[t]}.bind(null,o));return r};a.n=function(e){var t=e&&e.__esModule?function t(){return e["default"]}:function t(){return e};a.d(t,"a",t);return t};a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)};a.p="";return a(a.s=709)}({709:function(t,a){(function(e){const t=e.$,a=e.utils,r=a.Deferred,o=a.getInvokable,l=a.mergeAsTextInContext,i=a.mergeAsDataInContext,n=e.dataSource,u=n.utils,s=e.constants,c=s.DISPLAY_TYPES,d=s.HTTP_VERBS,f="AmazonS3",p=c.BOOLEAN,b=c.DATETIME,y=c.NUMBER,m="TEXT",h=d.POST,g="Bucket",k="FolderPath",S=s.DATASOURCE.SEARCH_CONDITION;let j=function t(a,r,o){let l={method:a};if(o)l.body=o;return e.ajax.direct({url:"/core/data/aws-s3/sign-request",type:"POST",body:l,contentType:"application/json",headers:{"x-skuid-data-source-name":r.name}}).then(function(e){return e.body.signedRequest})};if(n.getDataSourceType(f))return;new n.core.RESTDataSourceTypeBase({name:f,coerceRequest:function e(t){let a=t.type,r=t.model,o=this.getEntityMetadataCacheKey(r),l=u.getModelMergeConditions(r,t,{urlEncode:false}),i=a==="delete",n=a==="query",s=a==="search",c=t.request;r.useProxy=false;if(n){if(o==="Bucket"){c.data={method:"listBuckets"}}else if(o==="Object"){c.data={method:"listObjects",body:{Bucket:l[g]}};if(l[k]){let e=l[k];if(e[e.length-1]!=="/")e+="/";if(l[S]){c.data.body.Prefix=e+l[S]}else{c.data.body.Prefix=e}}else if(l[S]){c.data.body.Prefix=l[S]}}}else if(i){if(o==="Object"){c.data={method:"deleteObject",body:{Bucket:l[g],Key:t.row.Key}}}}else if(s){if(o==="Object"){c.data={method:"listObjects",body:{Bucket:l["bucket"],Prefix:l["search"]}}}}c.headers={"x-skuid-data-source-name":r.getDataSource().name};c.url="/core/data/aws"},parseSuccessfulLoadResponse:function e(r,o,l,i){let n=a.parseAsJSONIfString(r.body),s=this,c=o.pathToContent,d=s.getEntityMetadataCacheKey(i),f=u.getModelMergeConditions(i,{model:i},{urlEncode:false}),p=c?a.getObjectProperty(n,c):n,b=f&&f[g];if(t.isArray(p)){t.each(p,function(e,t){if(d==="Object"){if(f[k]){t.Name=t.Key.substring(f[k].length);if(t.Name==="/"||!t.Name){t.Name="(Current Parent Folder)"}}let e=(t.Name||t.Key).split("/");t.Name=e[e.length-1]||e[e.length-2];if(t.Key[t.Key.length-1]==="/")t.isFolder=true;t.ownerID=a.grab(t,"Owner","ID");t.ownerName=a.grab(t,"Owner","DisplayName");t.Bucket=b}})}return p},getEntityList:u.getEntityListStatic,getUploadMethods:function t(){function a(t,a,r,i,n){let s=t.name.split("."),c=l(r.filename,r),d=o(a.options.xmlDef,"attr"),f=r.model,p=f?f.getDataSource():e.dataSource.get(d("datasource")),b,y,m;if(c&&c.indexOf(".")===-1&&s.length>1){c+="."+s[s.length-1]}else if(!c){c=t.name}i({fileName:t.name});let h={method:"putObject",body:{Key:c,ContentType:t.type,Expires:60,ACL:d("acl")||"public-read"}};if(f){y=u.getModelMergeConditions(f,r,{urlEncode:false});if(y[g]){b=y[g]}else{n({message:'Error: Uploads to S3 require a Model with a "Bucket" Condition'})}if(y[k]){m=y[k]}}else{b=d("bucket");m=d("folderpath")}if(b){h.body.Bucket=l(b,f?{model:f}:r)}else{n({message:"Error: Uploads to S3 require a valid Bucket."})}if(m){if(m[m.length-1]!=="/"){m+="/"}h.body.Key=l(m,f?{model:f}:r)+h.body.Key}j(h.method,p,h.body).then(function(e){let a=new XMLHttpRequest;a.open("PUT",e,true);a.onreadystatechange=function(e){if(!e)return;if(e.target.readyState===4&&e.target.status===200){n()}else if(e.target.status>=400||e.target.status===0){n({message:"Error uploading to S3. Make sure bucket name is correct and CORs is configured for the bucket."})}};a.send(t)})}return{"S3 Direct Upload":{label:"S3 Upload Direct",canRunPostUploadSnippet:true,upload:a,needsModelInContext:true,hasDescription:false,builderProps:function e(t,a){let r=[];if(!a.attr("model")){r.push({id:"bucket",type:"template",label:"S3 Bucket Name",helptext:"The name of the AWS Bucket into which to upload files.",location:"attribute",displayAs:"input"},{id:"folderpath",type:"template",label:"S3 Folder Path",helptext:'The Folder Path, e.g. "/some/folder" within the selected Bucket in which uploaded files will be placed.',location:"attribute",displayAs:"input"})}r.push({id:"acl",type:"picklist",picklistEntries:[{label:"public-read",value:"public-read"},{label:"private",value:"private"},{label:"public-read-write",value:"public-read-write"},{label:"aws-exec-read",value:"aws-exec-read"},{label:"authenticated-read",value:"authenticated-read"},{label:"bucket-owner-read",value:"bucket-owner-read"},{label:"bucket-owner-full-control",value:"bucket-owner-full-control"}],label:"ACL of File"});return r}}}},queryEntityMetadata:u.queryEntityMetadataStatic,searchProperties:function e(t){return{conditions:[{name:"bucket",sourceType:"param",sourceParam:"bucket",value:t.attr("bucket"),operator:"=",encloseValueInQuotes:false,inactive:false}],properties:[{id:"bucket",label:"Bucket Name",type:"text"}]}},getActions:u.getActionsStatic,createActions:function t(o){return{"s3-request-download":{builderProps:[{label:"Key of Object",id:"key",type:"template",value:"{{Key}}",location:"attribute"},{label:"Bucket that holds Object",id:"bucket",type:"template",value:"{{Bucket}}",location:"attribute"}],runtimeExecution:function e(t,a,o,i){o=o||{};let n=r(),s=l(t.attr("key"),o),c=l(t.attr("bucket"),o);if(!c||!s)return n.reject("Must have a key or bucket specified");let d={Bucket:c,Key:s};j("getObject",i,d).then(function(e){u.downloadWithLink(s,e);n.resolve()});return n.promise()},label:"Download Target Object"},"s3-download-row":{builderProps:[{label:"Model of Objects",id:"model",type:"model",entryFilter:a.filterByDataSourceAndEntity(o.name,"Object")}],runtimeExecution:function t(a,o,l){l=l||{};let n=r(),s=u.extrapolateRowFromContext(l),c=l.model,d=i(a.attr("model"),l),f=c,p,b;if(!d)return n.reject("s3-request-download requires a model");if(c.id!==d||!s){p=e.model.getModel(d);f=p||c;b=p&&p.getRows();if(!p||b.length){return n.reject()}else{s=b[0]}}if(!f)n.reject();let y=u.getModelMergeConditions(f,l,{urlEncode:false});if(!y[g])n.reject("Downloading a file requires a bucket");if(!s.Key)n.reject("Downloading a file requires a key");let m={Bucket:y[g],Key:s.Key};j("getObject",f.dataSource,m).then(function(e){u.downloadWithLink(s.Key,e);n.resolve()});return n},label:"Download Row Object"}}},extendedProperties:{composer:{unomittableFields:true,hasEntityOptions:true},hasDefaultSearch:true,canServerSearch:true,hasGlobalSearchEntities:true,"x-metadata":{__skuid_fieldDefaults:{"*":{displaytype:m,writeable:false,filterable:false}},Bucket:{label:"Bucket",labelPlural:"Buckets",idFields:["Name"],fields:[{id:"CreationDate",displaytype:b,inlineHelpText:"When the Bucket was created"},{id:"Name",inlineHelpText:"The name of the bucket"}],methods:{query:{pathToContent:"Buckets",url:"",verb:h,contentType:"application/json"}}},Object:{label:"Object",labelPlural:"Objects",idFields:["Key"],fields:[{id:"ETag"},{id:"Key",inlineHelpText:"The key/name of the object",omittable:false},{id:"Bucket",inlineHelpText:"The bucket which contains the object",omittable:false},{id:"Name",label:"Object Name"},{id:"LastModified",displaytype:b},{id:"ownerName"},{id:"isFolder",displaytype:p},{id:"ownerID"},{id:"Size",displaytype:y},{id:"StorageClass"}],methods:{query:{pathToContent:"Contents",url:"",verb:h,contentType:"application/json"},delete:{url:"",verb:h,successIf:"requestsucceeds"},search:{pathToContent:"Contents",url:"",verb:h,contentType:"application/json"}},defaultConditions:[{sourcetype:"param",sourceparam:g,name:g,label:g,state:"filterablerequired",value:""},{sourcetype:"param",sourceparam:k,name:k,label:k,state:"filterablerequired",value:""}]}}}})})(e)}});return t});